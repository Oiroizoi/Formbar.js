<%- include('../partials/header_content') %>
	<%- include('../partials/sockets') %>
		<!DOCTYPE html>
		<html lang='en'>

		<head>
			<meta charset='UTF-8'>
			<meta http-equiv='X-UA-Compatible' content='IE=edge'>
			<meta name='viewport' content='width=device-width, initial-scale=1.0'>
			<script src='/js/iro.js'></script>
			<script src='/js/floating-ui-core.js'></script>
			<script src='/js/floating-ui-dom.js'></script>
			<script src='/js/deepObjectEqual.js'></script>
		</head>

		<body onload="load(<%= pollStatus %>)" style="margin-bottom: 10cqh;">
			<%- include('../partials/formbar_header') %>
				<header id='quickMenu'>
					<p id='className'>Class Name:</p>
					<p id='classCode'>Class Code:</p>
					<!-- <p id='classID'>Class ID:</p> -->
					<p id='totalUsers'></p>
					<!-- <button id='bannedMenu' class='quickButton tab' data-tab-group='mainTabs'>Banned Users</button> -->
					<!-- <button id='lessonMenu' class='quickButton tab' data-tab-group='mainTabs'>Make a Lesson</button> -->
					<button id='settingsMenu' class='quickButton tab' data-tab-group='mainTabs'><img src="img/cogwheel.svg" id="Settings"></button>
				</header>

				<div id='usersMenu' class='tabContent controlPanel default' data-tab-group='mainTabs'>
					<!-- This canvas should be the student panel pie-graph thingy -->
					<div id='VBDiv'>
						<%- include('../partials/virtual_bar.ejs') %>
							<div id='VBOptions'>
								<div id='userFilterBoxes' class='options'>
									<h2 class='headerText'>Filter</h2>
									<div class='headBox'>
										<button type='button' id='alert' class='filter'>Alerts</button>
										<button type='button' id='polls' class='filter'>Polls</button>
									</div>
								</div>
								<div id='userSortBoxes' class='options'>
									<h2 class='headerText'>Sort</h2>
									<div class='headBox'>
										<button type='button' id='name' class='sort'>Name</button>
										<button type='button' id='pollName' class='sort'>Poll Name</button>
										<button type='button' id='pollTime' class='sort'>Poll Time</button>
										<button type='button' id='helpTime' class='sort'>Help Time</button>
										<button type='button' id='permissions' class='sort pressed'>Permissions ðŸ¡‡</button>
									</div>
								</div>
								<div id='userSelectBoxes' class='options'>
									<h2 class='headerText'>Select</h2>
									<div class='headBox' id="selectPoll">
									</div>
								</div>
								<div id='userFastPollBoxes' class='options'>
									<h2 class='headerText'>Fast Poll</h2>
									<div class='headBox' id='quickPoll'>
									</div>
								</div>
							</div>
					</div>
				</div>
				<div>
				<div>
					<div id='pollsMenu' class='tabContent' data-tab-group='mainTabs'>
						<div id='pollOptions' class='options'>
							<h2 class='headerText'>Custom Polls</h2>
							<button id='publicPolls' class='quickButton tab unselectable' data-tab-group='polls'>Public
								Polls</button>
							<button id='classPolls' class='quickButton tab unselectable' data-tab-group='polls'>Class
								Polls</button>
							<button id='userPolls' class='quickButton tab unselectable' data-tab-group='polls'>Your
								Polls</button>
						</div>
						<h2 class='headerText' style='margin-top: 0;'>Start/Clear Poll</h2>
						<div id='startPollForm'>
							<label for='pollBox'>Prompt for the poll?</label>
							<input type='text' id='pollBox' placeholder='Prompt'>
							<input type='number' id='resNumber' min='1' max='26' step='1' value='1' hidden>
							<br>
							<div id='responses'></div>
							<button class='quickButton' onclick='addAnswer()'>+</button>
							<br>
							<br>
							<button id='generalOptionsButton' onclick='showGeneralOptions()'>General Options</button>
							<div id='generalOptions' hidden>
								<label for='multiRes'>Multiple answer poll?</label>
								<input type='checkbox' id='multiRes'>
								<br>
								<label for='resTextBox'>Would like to accept text responses?</label>
								<input type='checkbox' id='resTextBox' onclick='resTextChange()'>
								<br>
								<button id='resetAnswerNames' class='quickButton'>Reset Names</button>
								<button id='resetColors' class='quickButton'>Reset Colors</button>
								<label for='changeNames'>Specify Tags?</label>
								<input type='button' id='changeNames' value='Tags' onclick='selectTags.showModal()'
									class='quickButton'>
								<br>
								<label for='blind'>Blind poll? (Responses won't be visible until everyone has
									answered)</label>
								<input type='checkbox' id='blind'>
								<br>
								<label for='lastResponse'>Send Poll To Students With Same Response</label>
								<input type='checkbox' id='lastResponse'>
								<select name='basedOnResponse' id='basedOnResponse'></select>
								<br>
							</div>
						</div>

					</div>
				</div>
				<div id="settingsMenu" class="tabContent" data-tab-group="mainTabs">
					<div id="lessonMenu" class="tabContent" data-tab-group="mainTabs">
						<form method="post" enctype="multipart/form-data">
							<input name="spreadsheet" type="file">
							<input type="submit" class="quickButton">
						</form>
						<button type='button' id='nextStep'>Next Step</button><br>
						<br>
						<form>
							<label class='form-control' id='pollControl' for='modeP'>
								<input type='radio' name='mode' id='modeP' onchange='modeChange()' value='poll'>
								Poll Mode
							</label>
							<label class='form-control' id='pollControl' for='modeL'>
								<input type='radio' name='mode' id='modeL' onchange='modeChange()' value='lesson'>
								Lesson Mode
							</label>
							<label class='form-control' id='pollControl' for='modeQ'>
								<input type='radio' name='mode' id='modeQ' onchange='modeChange()' value='quiz'>
								Quiz Mode
							</label>
							<label class='form-control' id='pollControl' for='modePT'>
								<input type='radio' name='mode' id='modePT' onchange='modeChange()' value='playtime'>
								Playtime Mode
							</label>
						</form>
					</div>
					<div id='settingsMenu' class='tabContent' data-tab-group='mainTabs'>
						<div class='options'>
							<h2 class='headerText'>Settings</h2>
							<button id='permissions' class='quickButton tab pressed'
								data-tab-group='settingsTabs'>Permissions</button>
							<button id="tags" class="quickButton tab" data-tab-group="settingsTabs">Tags</button>
						</div>
						<div id='permissions' class='tabContent default' data-tab-group='settingsTabs'>
							<h2>Permissions</h2>
							<div id='permissionsList'></div>
						</div>
						<div id='tags' class='tabContent' data-tab-group='settingsTabs'>
							<h2>Tags</h2>
							<div id='tagsList'></div>
							<div id="tagOptions"></div>
						</div>
						<div id="settingsFunc">
							<button id="kickUsers" onclick="kickAll()">
								Kick All Students
							</button>
							<br>
							<button onclick="regenerateAccessCode()">
								Regenerate Code
							</button>
							<br>
							<div>
								<input type="text" id="classNameInput" placeholder="New class name">
								<button id="changeClassNameButton" onclick="changeClassName()">Change Class Name</button>
							</div>
						</div>
					</div>
					<dialog id='sharePollDialog'>
						<button
							onclick=`(()=>{currentSharePollId = null; document.getElementById('sharePollDialog').close()})()`>Close</button>
						<p>
							<label for='share'>Share to User</label>
							<input type='text' name='share' id='sharePollUserInput' pattern='[a-z0-9]+'
								placeholder='Username' onkeypress=`if(event.key == 'Enter') sharePoll('user')`>
						</p>
						<div id='userPollShares'></div>
						<p>
							<label for='share'>Share to Class</label>
							<input type='text' name='share' id='sharePollClassInput' pattern='[a-z0-9]+'
								placeholder='Class Code' onkeypress=`if(event.key == 'Enter') sharePoll('class')'`>
						</p>
						<div id='classPollShares'></div>
					</dialog>
					<%- include('../partials/body_content') %>
				</div>
				<div class="ongoingPollOptions">
					<div id="timeDiv">
						<p>Timer</p>
						<input type="number" class="inputtedTime" min="0.1" placeholder="00"> :
						<input type="number" class="inputtedTime" min="1" placeholder="00">
						<button type='button' id='timerButton'>Start Timer</button>
						<button type='button' id='timerStopButton' hidden>Stop Timer</button>
					</div>
					<div class="ongoingButtons">
						<button id='pollsMenu' class='quickButton tab'
							data-tab-group='mainTabs'>Edit Poll</button>
						<button id='startPoll' onclick='pollCheck()'>Start Poll</button>
						<button id='clearPoll' onclick='clearPollFunc()'>Clear Poll</button>
						<button  id='endPoll' onclick='endPollFunc()'>End Poll</button>
					</div>
				</div>
				<button id="startClass" onclick="startClass()">
					Start Class
				</button>
				<p><b id='pollCounter'></b></p>
				<p id='responsesCounter'></p>
				<details id="student-fake" style="opacity: 0.65; order: 9997;" style="display: none;" hidden>
					<summary>
						<span id="alerts"></span>
						<span>
							<input type="checkbox" id="checkbox_fake" name="studentCheckbox">
						</span>
						<span id="username"></span>
						<span id="studentTags"></span>
						<div id="reasons">
							<div id="helpReason"></div>
							<div id="breakReason"></div>
							<div id="response"></div>
						</div>
					</summary>
					<div id="permissions"></div>
					<div id="roomTags"></div>
					<div id="extraButtons"></div>
				</details>
				<div id='users'>
				</div>
				</div>
				<div id='bannedMenu' class='tabContent' data-tab-group='mainTabs'></div>
				<div id='publicPolls' class='customPolls tabContent' data-tab-group='polls'>
				</div>
				<div id='classPolls' class='customPolls tabContent' data-tab-group='polls'>
				</div>
				<div id='userPolls' class='customPolls tabContent' data-tab-group='polls'>
				</div>
				</div>
				<div id='lessonMenu' class='tabContent' data-tab-group='mainTabs'>
					<form method='post' enctype='multipart/form-data'>
						<input name='spreadsheet' type='file'>
						<input type='submit' class='quickButton'>
					</form>
					<button type='button' id='nextStep'>Next Step</button><br>
					<br>
					<button type='button' id='timerButton'>Start Timer</button>
					<button type='button' id='timerStopButton' hidden>Stop Timer</button>
					<br>
					<button id='kickUsers' onclick=`((event) => {socket.emit('classKickStudents')})()`>
						Kick All Students
					</button>
					<button id='endClass' onclick='endClass()'>
						End Class
					</button>
					<!-- Below 2 lines were moved outside the users div, just in case you need to know that-->
					<p><b id='pollCounter'></b></p>
					<p id='responsesCounter'></p>
					<div id='users'>
					</div>
				</div>
				<div id='bannedMenu' class='tabContent' data-tab-group='mainTabs'></div>
				<div id='publicPolls' class='customPolls tabContent' data-tab-group='polls'>
				</div>
				<div id='classPolls' class='customPolls tabContent' data-tab-group='polls'>
				</div>
				<div id='userPolls' class='customPolls tabContent' data-tab-group='polls'>
				</div>
				</div>
				<div id='lessonMenu' class='tabContent' data-tab-group='mainTabs'>
					<form method='post' enctype='multipart/form-data'>
						<input name='spreadsheet' type='file'>
						<input type='submit' class='quickButton'>
					</form>
					<button type='button' id='nextStep'>Next Step</button><br>
					<br>
					<form>
						<label class='form-control' id='pollControl' for='modeP'>
							<input type='radio' name='mode' id='modeP' onchange='modeChange()' value='poll'>
							Poll Mode
						</label>
						<label class='form-control' id='pollControl' for='modeL'>
							<input type='radio' name='mode' id='modeL' onchange='modeChange()' value='lesson'>
							Lesson Mode
						</label>
						<label class='form-control' id='pollControl' for='modeQ'>
							<input type='radio' name='mode' id='modeQ' onchange='modeChange()' value='quiz'>
							Quiz Mode
						</label>
						<label class='form-control' id='pollControl' for='modePT'>
							<input type='radio' name='mode' id='modePT' onchange='modeChange()' value='playtime'>
							Playtime Mode
						</label>
					</form>
				</div>
		</body>

		</html>
		<script src='/js/tabs.js'></script>
		<script>
			let userCustomPolls = []
			let classroomCustomPolls = []
			let publicCustomPolls = []
			let customPolls = []
			let editingPollId = null
			let currentSharePollId = null
			let currentSharePollType = null
			let classroom = {}

			const FilterState = {
				alert: [
					'Alert tickets',
					'Alert ticket in',
					'No alert ticket'
				],
				polls: [
					'Polls',
					'Responded to poll',
					'Did not respond to poll',
				]
			}

			const SortState = {
				name: [
					'Name',
					'Name ðŸ¡‡',
					'Name ðŸ¡…'
				],
				pollName: [
					'Poll Name',
					'Poll Name ðŸ¡‡',
					'Poll Name ðŸ¡…'
				],
				pollTime: [
					'Poll time',
					'Poll time ðŸ¡‡',
					'Poll time ðŸ¡…'
				],
				helpTime: [
					'Help time',
					'Sorting by Help time',
				],
				permissions: [
					'Permissions',
					'Permissions ðŸ¡‡',
					'Permissions ðŸ¡…'
				]
			}

			// 0 = off
			// 1 = only
			// 2 = except
			let filter = {
				alert: 0,
				break: 0,
				polls: 0
			}
			// 0 = off
			// 1 = descending
			// 2 = ascending
			let sort = {
				name: 0,
				pollName: 0,
				pollTime: 0,
				helpTime: 0,
				permissions: 1
			}

			let letterString = 'abcdefghijklmnopqrstuvwxyz'
			let generatedColors = []
			let pollResponses = []
			let colorPickers = []
			let multiRes = document.getElementById('multiRes')
			let usersDiv = document.getElementById('users')
			let resNumber = document.getElementById('resNumber')
			let resTextBox = document.getElementById('resTextBox')
			let endPoll = document.getElementById('endPoll')
			let clearPoll = document.getElementById('clearPoll')
			let startPollForm = document.getElementById('startPollForm')
			let pollPrompt = document.getElementById('pollBox')
			let permSort = document.getElementById('permSort')
			let responsesDiv = document.getElementById('responses')
			let resetAnswerNamesButton = document.getElementById('resetAnswerNames')
			let resetColorsButton = document.getElementById('resetColors')
			let toPollsButton = document.getElementById('toPolls')
			let toPollHistoryButton = document.getElementById('toPollHistory')
			let blindCheck = document.getElementById('blind')
			let className = document.getElementById('className')
			let classCode = document.getElementById('classCode')
			let classId = document.getElementById("classId")
			let mainPolls = document.getElementById('menuPolls')
			let unloadPollButton = document.getElementById('unload-poll')
			let savePollButton = document.getElementById('save-poll')
			let deletePollButton = document.getElementById('delete-poll')
			let sharePollDialog = document.getElementById('sharePollDialog')
			let sharePollUserInput = document.getElementById('sharePollUserInput')
			let sharePollClassInput = document.getElementById('sharePollClassInput')
			let permissionsDiv = document.querySelector('#permissionsList')
			let tagsDiv = document.querySelector('#tagsList');
			let tagOptionsDiv = document.querySelector('#tagOptions');
			let bannedTabButton = document.querySelector('.tab#bannedMenu')
			let pollsTabButton = document.querySelector('.tab#pollsMenu')
			let settingsTabButton = document.querySelector('.tab#settingsMenu')
			let permissionsTabButton = document.querySelector('.tab#permissions')
			let generalOptionsDiv = document.getElementById('generalOptions');
			let responsesCounter = document.getElementById('responsesCounter');

			let totalUsers = document.getElementById('totalUsers')
			let responseDivs = document.getElementsByClassName('response');
			// Function runs on page load
			// Checks if poll is active or not and displays correct output
			let rooms;
			socket.emit('cpUpdate')
			socket.on('cpUpdate', (newClassroom) => {
				rooms = newClassroom
			})
			let tagNames = '<%=tagNames%>';

			// Alerts the user if they try to start a poll without a prompt or responses
			function pollCheck() {
				if (pollPrompt.value == '' && responsesDiv.children.length == 0) {
					alert('Please enter a prompt for the poll and add responses')
				} else if (pollPrompt.value == '') {
					alert('Please enter a prompt for the poll')
				} else if (responsesDiv.children.length == 0) {
					alert('Please add responses to the poll')
				} else {
					startPoll()
				}
			}

			socket.emit("isClassActive")
			socket.on("isClassActive", (isActive) => {
				changeClassText(isActive);
			});

			function changeClassText(isActive) {
				const startClassButton = document.getElementById('startClass');
				const endClassButton = document.getElementById('endClass');

				if (isActive) {
					if (startClassButton) {
						startClassButton.innerText = 'End Class';
						startClassButton.onclick = endClass;
						startClassButton.id = 'endClass';
					}
				} else {
					if (endClassButton) {
						endClassButton.innerText = 'Start Class';
						endClassButton.onclick = startClass;
						endClassButton.id = 'startClass';
					}
				}
			}

			function startClass() {
				socket.emit('startClass')
				changeClassText(true);
			}

			function endClass() {
				if (confirm('Are you sure you want to end the class?')) {
					socket.emit('endClass')
					changeClassText(false);
				}
			}

			function regenerateAccessCode() {
				if (confirm("Are you sure you want to regenerate the class code?")) {
					socket.emit('regenerateClassCode');
				}
			}

			function changeClassName() {
				const newClassName = document.getElementById('classNameInput').value;
				if (!newClassName) return;
				if (confirm(`Are you sure you want to change the class name to "${newClassName}"?`)) {
					socket.emit('changeClassName', newClassName);
				}
			}

			function kickAll() {
				if (confirm('Are you sure you want to kick all students?')) {
					socket.emit('classKickStudents');
				}
			}

			// Handle settings
			const settings = <%- settings %>;
			
			// Handle sorting and filtering
			// They're stored by their name then a hyphen before the sorting value it is
			// 0 = off, 1 = descending, 2 = ascending
			if (settings.sort) {
				const [ sortName, sortValue ] = settings.sort.split('-');				
				const allSorts = document.querySelectorAll('.sort');
				const sortButton = document.getElementById(sortName);

				// Set the correct sort to on
				Object.keys(sort).forEach(key => sort[key] = 0);
				sort[sortName] = parseInt(sortValue);

				// Remove arrow from all sorts
				allSorts.forEach(button => {
					button.textContent = SortState[button.id][sort[button.id]]
					button.classList.remove('pressed')
				});

				// Set the correct sort to pressed
				sortButton.classList.add('pressed');
				sortButton.textContent = `${SortState[sortName][sortValue]}`;
			}

			if (settings.filter) {
				const [ filterName, filterValue ] = settings.filter.split('-');
				const allFilters = document.querySelectorAll('.filter');
				const filterButton = document.getElementById(filterName);

				// Set the correct filter to on
				Object.keys(filter).forEach(key => filter[key] = 0);
				filter[filterName] = parseInt(filterValue);

				// Remove arrow from all filters
				allFilters.forEach(button => {
					button.textContent = FilterState[button.id][filter[button.id]]
					button.classList.remove('pressed')
				});

				// Set the correct filter to pressed
				filterButton.classList.add('pressed');
				filterButton.textContent = `${FilterState[filterName][filterValue]}`;
			}

			// Handle mute button 
			let mute = settings.mute;
			setMuteSound(mute)

			function setMuteSound(isMuted) {
				mute = isMuted;
				document.getElementById('muteButton').hidden = mute;
				document.getElementById('unmuteButton').hidden = !mute;
			}

			function toggleMuteSound() {
				setMuteSound(!mute);
				socket.emit('setClassSetting', 'mute', mute);
			}
		</script>
		<script src='/js/controlPanelStudents.js'></script>
		<script src='/js/sockets/cpUpdate.js'></script>
		<script src='/js/modules/tags.js'></script>
		<script src='/js/controlPanelSockets.js'></script>
		<script src='/js/controlPanelPolls.js'></script>

		<%- include('../partials/footer_content') %>

			</html>
